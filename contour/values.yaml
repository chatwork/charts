# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

contour:
  nameOverride: ""
  fullnameOverride: ""

  imagePullSecrets: []

  # https://github.com/projectcontour/contour/blob/318ef5d71831b2d58ce04d5a3c8e5d46f76c9f2b/cmd/contour/serve.go#L100
  # PermitInsecureGRPC can only be set by command line flag.
  # https://github.com/projectcontour/contour/blob/cada619f7dd7f0cb1e82bb3f0e8c7f90d8c43cac/cmd/contour/servecontext.go#L86
  insecure: true

  image:
    repository: "docker.io/projectcontour/contour"
    tag: "v1.0.0"
    imagePullPolicy: "IfNotPresent"

  extraArgs: []

  resources: {}
  #  memory: "64Mi"
  #  cpu: "250m"
  #limits:
  #  memory: "128Mi"
  #  cpu: "500m"

  port:
    healthz: 8000
    xds: 8001

  xdsAddress: 0.0.0.0

  livenessProbe:
    initialDelaySeconds: 5
    periodSeconds: 5

  readinessProbe:
    initialDelaySeconds: 15
    periodSeconds: 10

  podAnnotations: {}
  tolerations: {}
  affinity: {}
  extraVolumes: []
  extraVolumeMounts: []

  deployment:
    annotations: {}
    autoscaling:
      enabled: false
      minReplicas: 2
      maxReplicas: 5
      metrics:
      - type: Resource
        resource:
          name: cpu
          targetAverageUtilization: 50

    strategy: {}
    #  type: RollingUpdate
    #  rollingUpdate:
    #    maxUnavailable: 1

    pdb:
      minAvailable: 1

    replicas: 1

  service:
    annotations: {}

  rbac:
    create: true
    serviceAccountName: default

  config:
    # should contour expect to be running inside a k8s cluster
    incluster: true
    #
    # path to kubeconfig (if not running inside a k8s cluster)
    # kubeconfig: /path/to/.kube/config
    #
    # Client request timeout to be passed to Envoy
    # as the connection manager request_timeout.
    # Defaults to 0, which Envoy interprets as disabled.
    # Note that this is the timeout for the whole request,
    # not an idle timeout.
    # request-timeout: 0s
    # disable ingressroute permitInsecure field
    disablePermitInsecure: false
    tls:
    #   minimum TLS version that Contour will negotiate
    #   minimum-protocol-version: "1.1"
    # The following config shows the defaults for the leader election.
    leaderelection:
      configmap-name: contour-leader-elect
      configmap-namespace: "{{ .Release.Namespace }}"
    ### Logging options
    # Default setting
    accesslog-format: envoy
    # To enable JSON logging in Envoy
    # accesslog-format: json
    # The default fields that will be logged are specified below.
    # To customise this list, just add or remove entries.
    # The canonical list is available at
    # https://godoc.org/github.com/projectcontour/contour/internal/envoy#JSONFields
    # json-fields:
    #   - "@timestamp"
    #   - "authority"
    #   - "bytes_received"
    #   - "bytes_sent"
    #   - "downstream_local_address"
    #   - "downstream_remote_address"
    #   - "duration"
    #   - "method"
    #   - "path"
    #   - "protocol"
    #   - "request_id"
    #   - "requested_server_name"
    #   - "response_code"
    #   - "response_flags"
    #   - "uber_trace_id"
    #   - "upstream_cluster"
    #   - "upstream_host"
    #   - "upstream_local_address"
    #   - "upstream_service_time"
    #   - "user_agent"
    #   - "x_forwarded_for"

envoy:
  nameOverride: ""
  fullnameOverride: ""

  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 10

  readinessProbe:
    initialDelaySeconds: 10
    periodSeconds: 10

  port:
    http: 8080
    https: 8443
    healthz: 8002

  podAnnotations: {}
  tolerations: {}
  affinity: {}
  extraVolumes: []

  initContainers:
    imagePullSecrets: []
    image:
      repository: "docker.io/projectcontour/contour"
      tag: "v1.0.0"
      imagePullPolicy: "IfNotPresent"
    extraArgs: []
    extraVolumeMounts: []

  envoy:
    imagePullSecrets: []
    image:
      repository: "docker.io/envoyproxy/envoy"
      tag: "v1.11.2"
      imagePullPolicy: "IfNotPresent"

    logLevel: "info"
    extraArgs: []
    extraVolumeMounts: []

    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"

  deployment:
    enabled: false
    annotations: {}

    replicas: 2

    autoscaling:
      enabled: false
      minReplicas: 2
      maxReplicas: 5
      metrics:
      - type: Resource
        resource:
          name: cpu
          targetAverageUtilization: 50

    strategy: {}
    #  type: RollingUpdate
    #  rollingUpdate:
    #    maxUnavailable: 1

    pdb:
      minAvailable: 1

  daemonset:
    enabled: true
    annotations: {}

    hostNetwork: false

    updateStrategy: {}
    # type: RollingUpdate
    # rollingUpdate:
    #  maxUnavailable: 10%

  service:
    annotations: {}
      #service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
      #service.beta.kubernetes.io/aws-load-balancer-extra-security-groups: sg-12234
      #
    type: "LoadBalancer"

    #externalTrafficPolicy: "Cluster"
    externalTrafficPolicy: ""

    port:
      http: 8080
      https: 8443

    nodePort:
      http: "30000"
      https: "30001"
