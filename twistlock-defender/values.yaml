fullnameOverride: ""
nameOverride: ""

accessToken: "accessToken"

console:
  dnsName: twistlock-console
  port: 8084

image:
  repository: "registry-auth.twistlock.com/tw_{{ .Values.accessToken }}/twistlock/defender"
  tag: "defender{{ .Values.config.docker.tag }}"
  imagePullPolicy: IfNotPresent
  imagePullSecrets: []

volumeMounts:
  dataPath: "/var/lib/twistlock"
  certificates: "/var/lib/twistlock/certificates"
  docker:
    sockPath: "/var/run"

volumes:
  dataPath: "/var/lib/twistlock/defender"
  docker:
    sockPath: "/var/run"
  passwd: "/etc/passwd"
  auditLog: "/var/log/audit"
  syslog: "/dev/log"

config:
  console:
    wsAddress: wss://{{ .Values.console.dnsName }}:{{ .Values.console.port }}
  defender:
    type: "cri"
    listenerType: "none"
  clusterId: "CLUSTERID"
  cri:
    dataVolumeName: cri-data
  monitor:
    serviceAccounts: true
    istio: false
  # https://docs.twistlock.com/docs/19.07/install/install_defender/install_rasp_defender.html#embed-rasp-defender-manually
  installBundle: ""
  collectPodLabels: true
  docker:
    clientAddress: "/var/run/docker.sock"
    tag: "_22_01_882"
  hostCustomCompliance: false
  cloudHostnameEnabled: false

resources:
  limits:
    cpu: 1000m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

securityContext:
  readOnlyRootFilesystem: true
  privileged: true
  capabilities:
    add:
      - NET_ADMIN  # Required for process monitoring
      - NET_RAW    # Required for iptables (CNNF, runtime DNS, WAAS). See: https://bugzilla.redhat.com/show_bug.cgi?id=1895032
      - SYS_ADMIN  # Required for filesystem monitoring
      - SYS_PTRACE # Required for local audit monitoring
      - SYS_CHROOT # Required for changing mount namespace using setns
      - MKNOD # A capability to create special files using mknod(2), used by docker-less registry scanning
      - SETFCAP # A capability to set file capabilities, used by docker-less registry scanning
      - IPC_LOCK   # Required for perf events monitoring, allowing to ignore memory lock limits

secret:
  ca_cert: "CA_CERT"
  client_cert: "CLIENT_CERT"
  client_key: "CLIENT_KEY"
  service_parameter: "SERVICE_PARAMETER"
  admission_cert:
  admission_key:

useHostNetwork: true
useHostPID: true

annotations: {}
updateStrategy:
  type: RollingUpdate

port:
  https:
    containerPort: 443
    servicePort: 443

service:
  enabled: false

podAnnotations: {}
tolerations: []
extraEnv: []
extraVolumeMounts: []
extraVolumes: []

livenessProbe: {}
readinessProbe: {}

priorityClassName: ""

serviceAccount:
  create: true
  name:
  annotations: {}
